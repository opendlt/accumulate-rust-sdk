// GENERATED BY Accumulate gen-sdk. DO NOT EDIT.

//! Accumulate JSON-RPC API client for 

use std::sync::Arc;

use serde_json::Value;

use crate::json_rpc_client::{JsonRpcClient, JsonRpcError};
use crate::types::*;

/// Accumulate JSON-RPC API client
#[derive(Clone)]
pub struct AccumulateClient {
    client: Arc<JsonRpcClient>,
}

impl AccumulateClient {
    /// Create a new client with the given server URL
    pub fn new(server_url: impl Into<String>) -> Self {
        Self {
            client: Arc::new(JsonRpcClient::new(server_url)),
        }
    }

    /// Create a new client with a custom reqwest client
    pub fn with_client(server_url: impl Into<String>, client: reqwest::Client) -> Self {
        Self {
            client: Arc::new(JsonRpcClient::with_client(server_url, client)),
        }
    }


    /// queries the basic configuration of the node
    pub async fn describe(&self) -> Result<Descriptionresponse, JsonRpcError> {
        let result = self.client.call("describe", None).await?;
        Ok(serde_json::from_value(result)?)
    }



    /// submits a transaction
    pub async fn execute(&self, request: &Txrequest) -> Result<Txresponse, JsonRpcError> {
        let result = self.client.call("execute", Some(serde_json::to_value(request)?)).await?;
        Ok(serde_json::from_value(result)?)
    }



    /// submits an AddCredits transaction
    pub async fn execute_add_credits(&self, request: &TxRequest) -> Result<TxResponse, JsonRpcError> {
        let result = self.client.call("add-credits", Some(serde_json::to_value(request)?)).await?;
        Ok(serde_json::from_value(result)?)
    }



    /// submits a BurnTokens transaction
    pub async fn execute_burn_tokens(&self, request: &TxRequest) -> Result<TxResponse, JsonRpcError> {
        let result = self.client.call("burn-tokens", Some(serde_json::to_value(request)?)).await?;
        Ok(serde_json::from_value(result)?)
    }



    /// submits a CreateIdentity transaction
    pub async fn execute_create_adi(&self, request: &TxRequest) -> Result<TxResponse, JsonRpcError> {
        let result = self.client.call("create-adi", Some(serde_json::to_value(request)?)).await?;
        Ok(serde_json::from_value(result)?)
    }



    /// submits a CreateDataAccount transaction
    pub async fn execute_create_data_account(&self, request: &TxRequest) -> Result<TxResponse, JsonRpcError> {
        let result = self.client.call("create-data-account", Some(serde_json::to_value(request)?)).await?;
        Ok(serde_json::from_value(result)?)
    }



    /// submits a CreateIdentity transaction
    pub async fn execute_create_identity(&self, request: &TxRequest) -> Result<TxResponse, JsonRpcError> {
        let result = self.client.call("create-identity", Some(serde_json::to_value(request)?)).await?;
        Ok(serde_json::from_value(result)?)
    }



    /// submits a CreateKeyBook transaction
    pub async fn execute_create_key_book(&self, request: &TxRequest) -> Result<TxResponse, JsonRpcError> {
        let result = self.client.call("create-key-book", Some(serde_json::to_value(request)?)).await?;
        Ok(serde_json::from_value(result)?)
    }



    /// submits a CreateKeyPage transaction
    pub async fn execute_create_key_page(&self, request: &TxRequest) -> Result<TxResponse, JsonRpcError> {
        let result = self.client.call("create-key-page", Some(serde_json::to_value(request)?)).await?;
        Ok(serde_json::from_value(result)?)
    }



    /// submits a CreateToken transaction
    pub async fn execute_create_token(&self, request: &TxRequest) -> Result<TxResponse, JsonRpcError> {
        let result = self.client.call("create-token", Some(serde_json::to_value(request)?)).await?;
        Ok(serde_json::from_value(result)?)
    }



    /// submits a CreateTokenAccount transaction
    pub async fn execute_create_token_account(&self, request: &TxRequest) -> Result<TxResponse, JsonRpcError> {
        let result = self.client.call("create-token-account", Some(serde_json::to_value(request)?)).await?;
        Ok(serde_json::from_value(result)?)
    }



    /// submits a transaction
    pub async fn execute_direct(&self, request: &Executerequest) -> Result<Txresponse, JsonRpcError> {
        let result = self.client.call("execute-direct", Some(serde_json::to_value(request)?)).await?;
        Ok(serde_json::from_value(result)?)
    }



    /// submits an IssueTokens transaction
    pub async fn execute_issue_tokens(&self, request: &TxRequest) -> Result<TxResponse, JsonRpcError> {
        let result = self.client.call("issue-tokens", Some(serde_json::to_value(request)?)).await?;
        Ok(serde_json::from_value(result)?)
    }



    /// submits a transaction without routing it. INTENDED FOR INTERNAL USE ONLY
    pub async fn execute_local(&self, request: &Executerequest) -> Result<Txresponse, JsonRpcError> {
        let result = self.client.call("execute-local", Some(serde_json::to_value(request)?)).await?;
        Ok(serde_json::from_value(result)?)
    }



    /// submits a SendTokens transaction
    pub async fn execute_send_tokens(&self, request: &TxRequest) -> Result<TxResponse, JsonRpcError> {
        let result = self.client.call("send-tokens", Some(serde_json::to_value(request)?)).await?;
        Ok(serde_json::from_value(result)?)
    }



    /// submits an UpdateAccountAuth transaction
    pub async fn execute_update_account_auth(&self, request: &TxRequest) -> Result<TxResponse, JsonRpcError> {
        let result = self.client.call("update-account-auth", Some(serde_json::to_value(request)?)).await?;
        Ok(serde_json::from_value(result)?)
    }



    /// submits an UpdateKey transaction
    pub async fn execute_update_key(&self, request: &TxRequest) -> Result<TxResponse, JsonRpcError> {
        let result = self.client.call("update-key", Some(serde_json::to_value(request)?)).await?;
        Ok(serde_json::from_value(result)?)
    }



    /// submits an UpdateKeyPage transaction
    pub async fn execute_update_key_page(&self, request: &TxRequest) -> Result<TxResponse, JsonRpcError> {
        let result = self.client.call("update-key-page", Some(serde_json::to_value(request)?)).await?;
        Ok(serde_json::from_value(result)?)
    }



    /// submits a WriteData transaction
    pub async fn execute_write_data(&self, request: &TxRequest) -> Result<TxResponse, JsonRpcError> {
        let result = self.client.call("write-data", Some(serde_json::to_value(request)?)).await?;
        Ok(serde_json::from_value(result)?)
    }



    /// submits a WriteDataTo transaction
    pub async fn execute_write_data_to(&self, request: &TxRequest) -> Result<TxResponse, JsonRpcError> {
        let result = self.client.call("write-data-to", Some(serde_json::to_value(request)?)).await?;
        Ok(serde_json::from_value(result)?)
    }



    /// requests tokens from the ACME faucet
    pub async fn faucet(&self, request: &Protocol.acmefaucet) -> Result<Txresponse, JsonRpcError> {
        let result = self.client.call("faucet", Some(serde_json::to_value(request)?)).await?;
        Ok(serde_json::from_value(result)?)
    }



    /// queries network metrics, such as transactions per second
    pub async fn metrics(&self, request: &Metricsquery) -> Result<Chainqueryresponse, JsonRpcError> {
        let result = self.client.call("metrics", Some(serde_json::to_value(request)?)).await?;
        Ok(serde_json::from_value(result)?)
    }



    /// queries an account or account chain by URL
    pub async fn query(&self, request: &Generalquery) -> Result<Chainqueryresponse|transactionqueryresponse|multiresponse, JsonRpcError> {
        let result = self.client.call("query", Some(serde_json::to_value(request)?)).await?;
        Ok(serde_json::from_value(result)?)
    }



    /// queries an entry on an account's data chain
    pub async fn query_data(&self, request: &Dataentryquery) -> Result<Chainqueryresponse, JsonRpcError> {
        let result = self.client.call("query-data", Some(serde_json::to_value(request)?)).await?;
        Ok(serde_json::from_value(result)?)
    }



    /// queries a range of entries on an account's data chain
    pub async fn query_data_set(&self, request: &Dataentrysetquery) -> Result<Multiresponse, JsonRpcError> {
        let result = self.client.call("query-data-set", Some(serde_json::to_value(request)?)).await?;
        Ok(serde_json::from_value(result)?)
    }



    /// queries the directory entries of an account
    pub async fn query_directory(&self, request: &Directoryquery) -> Result<Multiresponse, JsonRpcError> {
        let result = self.client.call("query-directory", Some(serde_json::to_value(request)?)).await?;
        Ok(serde_json::from_value(result)?)
    }



    /// queries the location of a key within an account's key book(s)
    pub async fn query_key_page_index(&self, request: &Keypageindexquery) -> Result<Chainqueryresponse, JsonRpcError> {
        let result = self.client.call("query-key-index", Some(serde_json::to_value(request)?)).await?;
        Ok(serde_json::from_value(result)?)
    }



    /// queries an account's major blocks
    pub async fn query_major_blocks(&self, request: &Majorblocksquery) -> Result<Multiresponse, JsonRpcError> {
        let result = self.client.call("query-major-blocks", Some(serde_json::to_value(request)?)).await?;
        Ok(serde_json::from_value(result)?)
    }



    /// queries an account's minor blocks
    pub async fn query_minor_blocks(&self, request: &Minorblocksquery) -> Result<Multiresponse, JsonRpcError> {
        let result = self.client.call("query-minor-blocks", Some(serde_json::to_value(request)?)).await?;
        Ok(serde_json::from_value(result)?)
    }



    /// query_synth method
    pub async fn query_synth(&self, request: &Synthetictransactionrequest) -> Result<Transactionqueryresponse, JsonRpcError> {
        let result = self.client.call("query-synth", Some(serde_json::to_value(request)?)).await?;
        Ok(serde_json::from_value(result)?)
    }



    /// queries a transaction by ID
    pub async fn query_tx(&self, request: &Txnquery) -> Result<Transactionqueryresponse, JsonRpcError> {
        let result = self.client.call("query-tx", Some(serde_json::to_value(request)?)).await?;
        Ok(serde_json::from_value(result)?)
    }



    /// queries an account's transaction history
    pub async fn query_tx_history(&self, request: &Txhistoryquery) -> Result<Multiresponse, JsonRpcError> {
        let result = self.client.call("query-tx-history", Some(serde_json::to_value(request)?)).await?;
        Ok(serde_json::from_value(result)?)
    }



    /// queries a transaction by ID
    pub async fn query_tx_local(&self, request: &Txnquery) -> Result<Transactionqueryresponse, JsonRpcError> {
        let result = self.client.call("query-tx-local", Some(serde_json::to_value(request)?)).await?;
        Ok(serde_json::from_value(result)?)
    }



    /// queries the status of the node
    pub async fn status(&self) -> Result<Statusresponse, JsonRpcError> {
        let result = self.client.call("status", None).await?;
        Ok(serde_json::from_value(result)?)
    }



    /// queries the software version of the node
    pub async fn version(&self) -> Result<Chainqueryresponse, JsonRpcError> {
        let result = self.client.call("version", None).await?;
        Ok(serde_json::from_value(result)?)
    }



    /// Execute a transaction directly
    pub async fn execute(&self, request: &Submitrequest) -> Result<Submitresponse, JsonRpcError> {
        let result = self.client.call("execute", Some(serde_json::to_value(request)?)).await?;
        Ok(serde_json::from_value(result)?)
    }



    /// query method
    pub async fn query(&self, request: &Api.query) -> Result<Api.record, JsonRpcError> {
        let result = self.client.call("", Some(serde_json::to_value(request)?)).await?;
        Ok(serde_json::from_value(result)?)
    }



    /// Query block information
    pub async fn query_block(&self, request: &Blockquery) -> Result<Blockresponse, JsonRpcError> {
        let result = self.client.call("query-block", Some(serde_json::to_value(request)?)).await?;
        Ok(serde_json::from_value(result)?)
    }



    /// Query chain entries
    pub async fn query_chain(&self, request: &Chainquery) -> Result<Chainresponse, JsonRpcError> {
        let result = self.client.call("query-chain", Some(serde_json::to_value(request)?)).await?;
        Ok(serde_json::from_value(result)?)
    }



    /// Submit a transaction
    pub async fn submit(&self, request: &Submitrequest) -> Result<Submitresponse, JsonRpcError> {
        let result = self.client.call("submit", Some(serde_json::to_value(request)?)).await?;
        Ok(serde_json::from_value(result)?)
    }



    /// Submit multiple transactions
    pub async fn submit_multi(&self, request: &Submitrequest) -> Result<Submitresponse, JsonRpcError> {
        let result = self.client.call("submit-multi", Some(serde_json::to_value(request)?)).await?;
        Ok(serde_json::from_value(result)?)
    }



    /// query method
    pub async fn query(&self) -> Result<, JsonRpcError> {
        let result = self.client.call("query", None).await?;
        Ok(serde_json::from_value(result)?)
    }



}