// GENERATED BY Accumulate gen-sdk. DO NOT EDIT.

use serde::{Deserialize, Serialize};
use std::collections::HashMap;

// Generated types would go here - for now using handcrafted common types

// Common types that are always needed

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct StatusResponse {
    pub network: String,
    pub version: String,
    pub commit: String,
    pub node_info: NodeInfo,
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct NodeInfo {
    pub id: String,
    pub listen_addr: String,
    pub network: String,
    pub version: String,
    pub channels: String,
    pub moniker: String,
    pub other: HashMap<String, serde_json::Value>,
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct QueryResponse<T> {
    pub result: T,
    pub height: i64,
    pub proof: Option<serde_json::Value>,
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct TransactionResponse {
    pub txid: String,
    pub hash: String,
    pub height: i64,
    pub index: i32,
    pub tx: serde_json::Value,
    pub tx_result: TransactionResult,
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct TransactionResult {
    pub code: i32,
    pub data: Option<String>,
    pub log: String,
    pub info: String,
    pub gas_wanted: String,
    pub gas_used: String,
    pub events: Vec<Event>,
    pub codespace: String,
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct Event {
    #[serde(rename = "type")]
    pub event_type: String,
    pub attributes: Vec<Attribute>,
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct Attribute {
    pub key: String,
    pub value: String,
    pub index: bool,
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct SignedTransaction {
    pub body: serde_json::Value,
    pub signatures: Vec<Signature>,
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct Signature {
    pub public_key: String,
    pub signature: String,
    #[serde(rename = "type")]
    pub signature_type: String,
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct Account {
    pub url: String,
    #[serde(rename = "type")]
    pub account_type: String,
    pub data: serde_json::Value,
    pub credits: Option<i64>,
    pub nonce: Option<i64>,
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct FaucetResponse {
    pub txid: String,
    pub link: String,
    pub account: String,
    pub amount: String,
}

// V3 specific types
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct V3SubmitRequest {
    pub envelope: TransactionEnvelope,
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct V3SubmitResponse {
    pub hash: String,
    pub result: SubmitResult,
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct SubmitResult {
    pub code: i32,
    pub message: String,
    pub data: Option<serde_json::Value>,
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct TransactionEnvelope {
    pub transaction: serde_json::Value,
    pub signatures: Vec<V3Signature>,
    pub metadata: Option<serde_json::Value>,
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct V3Signature {
    pub public_key: Vec<u8>,
    pub signature: Vec<u8>,
    pub timestamp: i64,
    pub vote: Option<String>,
}