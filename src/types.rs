// GENERATED BY Accumulate gen-sdk. DO NOT EDIT.

//! Type definitions for Accumulate API

use base64::{Engine as _, engine::general_purpose};
use chrono::{DateTime, Utc};
use serde::{Deserialize, Serialize, Serializer, Deserializer};
use serde_json::Value;




/// Url type definition
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
#[serde(rename_all = "camelCase")]
pub struct Url {

}

impl Url {
    /// Create a new instance with default values
    pub fn new() -> Self {
        Self {

        }
    }
}

impl Default for Url {
    fn default() -> Self {
        Self::new()
    }
}


/// BigInt type definition
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
#[serde(rename_all = "camelCase")]
pub struct Bigint {

}

impl Bigint {
    /// Create a new instance with default values
    pub fn new() -> Self {
        Self {

        }
    }
}

impl Default for Bigint {
    fn default() -> Self {
        Self::new()
    }
}


/// Hash type definition
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
#[serde(rename_all = "camelCase")]
pub struct Hash {

}

impl Hash {
    /// Create a new instance with default values
    pub fn new() -> Self {
        Self {

        }
    }
}

impl Default for Hash {
    fn default() -> Self {
        Self::new()
    }
}


/// ChainId type definition
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
#[serde(rename_all = "camelCase")]
pub struct Chainid {

}

impl Chainid {
    /// Create a new instance with default values
    pub fn new() -> Self {
        Self {

        }
    }
}

impl Default for Chainid {
    fn default() -> Self {
        Self::new()
    }
}


/// Duration type definition
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
#[serde(rename_all = "camelCase")]
pub struct Duration {

}

impl Duration {
    /// Create a new instance with default values
    pub fn new() -> Self {
        Self {

        }
    }
}

impl Default for Duration {
    fn default() -> Self {
        Self::new()
    }
}


/// Timestamp type definition
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
#[serde(rename_all = "camelCase")]
pub struct Timestamp {

}

impl Timestamp {
    /// Create a new instance with default values
    pub fn new() -> Self {
        Self {

        }
    }
}

impl Default for Timestamp {
    fn default() -> Self {
        Self::new()
    }
}



// Helper functions for serialization

fn serialize_bytes<S>(bytes: &[u8], serializer: S) -> Result<S::Ok, S::Error>
where
    S: Serializer,
{
    let encoded = general_purpose::STANDARD.encode(bytes);
    serializer.serialize_str(&encoded)
}

fn deserialize_bytes<'de, D>(deserializer: D) -> Result<Vec<u8>, D::Error>
where
    D: Deserializer<'de>,
{
    let encoded = String::deserialize(deserializer)?;
    general_purpose::STANDARD
        .decode(&encoded)
        .map_err(serde::de::Error::custom)
}