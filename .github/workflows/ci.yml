name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  check:
    name: Check
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
        rust: [stable]

    steps:
    - name: Checkout sources
      uses: actions/checkout@v4

    - name: Install stable toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        toolchain: ${{ matrix.rust }}
        components: rustfmt, clippy

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: 'tooling/ts-fixture-exporter/package-lock.json'

    - name: Install Node.js dependencies
      working-directory: tooling/ts-fixture-exporter
      run: npm ci

    - name: Export TypeScript fixtures
      working-directory: tooling/ts-fixture-exporter
      run: npm run export

    - name: Rust cache
      uses: Swatinem/rust-cache@v2
      with:
        workspaces: "unified"
        key: ${{ matrix.os }}-${{ matrix.rust }}

    - name: Check formatting
      working-directory: unified
      run: cargo fmt --all -- --check

    - name: Run clippy
      working-directory: unified
      run: cargo clippy --all-targets --all-features -- -D warnings

    - name: Check compilation
      working-directory: unified
      run: cargo check --all-targets --all-features

  test:
    name: Test Suite
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
        rust: [stable]

    steps:
    - name: Checkout sources
      uses: actions/checkout@v4

    - name: Install stable toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        toolchain: ${{ matrix.rust }}

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: 'tooling/ts-fixture-exporter/package-lock.json'

    - name: Install Node.js dependencies
      working-directory: tooling/ts-fixture-exporter
      run: npm ci

    - name: Export TypeScript fixtures
      working-directory: tooling/ts-fixture-exporter
      run: npm run export

    - name: Rust cache
      uses: Swatinem/rust-cache@v2
      with:
        workspaces: "unified"
        key: ${{ matrix.os }}-${{ matrix.rust }}

    - name: Run tests
      working-directory: unified
      run: cargo test --all-features

    - name: Run conformance tests
      working-directory: unified
      run: cargo test conformance --all-features

  coverage:
    name: Coverage
    runs-on: ubuntu-latest
    needs: [test]

    steps:
    - name: Checkout sources
      uses: actions/checkout@v4

    - name: Install stable toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: 'tooling/ts-fixture-exporter/package-lock.json'

    - name: Install Node.js dependencies
      working-directory: tooling/ts-fixture-exporter
      run: npm ci

    - name: Export TypeScript fixtures
      working-directory: tooling/ts-fixture-exporter
      run: npm run export

    - name: Rust cache
      uses: Swatinem/rust-cache@v2
      with:
        workspaces: "unified"

    - name: Install cargo-llvm-cov
      working-directory: unified
      run: cargo install cargo-llvm-cov --locked

    - name: Generate coverage report
      working-directory: unified
      run: cargo llvm-cov --all-features --lcov --output-path target/lcov.info

    - name: Run coverage gate
      working-directory: unified
      run: |
        chmod +x scripts/coverage_gate.sh
        scripts/coverage_gate.sh --overall-threshold 70 --critical-threshold 85

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        files: unified/target/lcov.info
        directory: unified
        fail_ci_if_error: false
        verbose: true

    - name: Upload coverage artifact
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report
        path: |
          unified/target/lcov.info
          unified/target/llvm-cov/html/
        retention-days: 7

  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest

    steps:
    - name: Checkout sources
      uses: actions/checkout@v4

    - name: Install stable toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Rust cache
      uses: Swatinem/rust-cache@v2
      with:
        workspaces: "unified"

    - name: Install cargo-audit
      working-directory: unified
      run: cargo install cargo-audit --locked

    - name: Run security audit
      working-directory: unified
      run: cargo audit

  documentation:
    name: Documentation
    runs-on: ubuntu-latest

    steps:
    - name: Checkout sources
      uses: actions/checkout@v4

    - name: Install stable toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Rust cache
      uses: Swatinem/rust-cache@v2
      with:
        workspaces: "unified"

    - name: Build documentation
      working-directory: unified
      run: cargo doc --all-features --no-deps --document-private-items

    - name: Check for warnings in documentation
      working-directory: unified
      run: cargo doc --all-features --no-deps -D warnings

    - name: Upload documentation artifact
      uses: actions/upload-artifact@v4
      with:
        name: documentation
        path: unified/target/doc/
        retention-days: 7

  packaging:
    name: Packaging
    runs-on: ubuntu-latest

    steps:
    - name: Checkout sources
      uses: actions/checkout@v4

    - name: Install stable toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Rust cache
      uses: Swatinem/rust-cache@v2
      with:
        workspaces: "unified"

    - name: Test packaging
      working-directory: unified
      run: cargo package --allow-dirty

    - name: Test dry-run publish
      working-directory: unified
      run: cargo publish --dry-run

  examples:
    name: Examples
    runs-on: ubuntu-latest

    steps:
    - name: Checkout sources
      uses: actions/checkout@v4

    - name: Install stable toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Rust cache
      uses: Swatinem/rust-cache@v2
      with:
        workspaces: "unified"

    - name: Check examples compile
      working-directory: unified
      run: cargo check --examples

    - name: Build examples
      working-directory: unified
      run: cargo build --examples

  ci-success:
    name: CI Success
    if: always()
    needs:
      - check
      - test
      - coverage
      - security-audit
      - documentation
      - packaging
      - examples
    runs-on: ubuntu-latest
    steps:
      - name: Check all jobs
        run: |
          if [[ "${{ needs.check.result }}" != "success" || \
                "${{ needs.test.result }}" != "success" || \
                "${{ needs.coverage.result }}" != "success" || \
                "${{ needs.documentation.result }}" != "success" || \
                "${{ needs.packaging.result }}" != "success" || \
                "${{ needs.examples.result }}" != "success" ]]; then
            echo "One or more critical jobs failed"
            exit 1
          fi
          echo "All critical CI jobs passed!"